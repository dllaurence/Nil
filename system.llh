#ifndef SYSTEM_LLH
#define SYSTEM_LLH

;**********************************************************************
; system.llh
;
; Public declarations of external objects--mainly C library functions
; and helper functions defined in system.c.
;
; Many of these are here for debugging.
;
; Copyright 2009-2010 by Dustin Laurence.  Distributed under the terms of
; the LGPLv3.
;
;**********************************************************************

#include "c_defs.llh"

; ASCII codes (very handy since we don't have C's char constants)

    ; Whitespace
    #define ASCII_TAB        9
    #define ASCII_NEWLINE   10
    #define ASCII_VTAB      11
    #define ASCII_FORMFEED  12
    #define ASCII_CR        13
    #define ASCII_SPACE     32

    ; Symbols
    #define ASCII_DQUOTE    34
    #define ASCII_HASH      35
    #define ASCII_SQUOTE    39
    #define ASCII_LPAREN    40
    #define ASCII_RPAREN    41
    #define ASCII_PERIOD    46
    #define ASCII_COLON     58

    ; Digits
    #define ASCII_0         48
    #define ASCII_1         49

    ; Majescules
    #define ASCII_A         65
    #define ASCII_B         66
    #define ASCII_C         67
    #define ASCII_D         68

    #define ASCII_N         78
    #define ASCII_O         79
    #define ASCII_P         80
    #define ASCII_Q         81
    #define ASCII_R         82

    ; Miniscules
    #define ASCII_a         97

    #define ASCII_DEL      127

; Assertions

    declare ccc void @abort()

    ; These are defined in system_ll.llm
    declare ccc void @cant_happen_impl(%c_int %line)

    #if NDEBUG
    #define cant_happen()
    #else
    #define cant_happen() call ccc void @cant_happen_impl(%c_int __LINE__)
    #endif

    declare ccc void @assert_impl(i1 %test, %c_int %line)

    ; Usage note: this is much less useful than in C, because there is no
    ; expression language.  You must assign the i1 result of a test to a
    ; register manually, then pass it to assert().  We can't provide any
    ; help because the "non-hygenic macros" problem is worse than in C, and
    ; anything that uses a register will capture from the environment.
    #if NDEBUG
    #define assert(test)
    #else
    #define assert(test) call ccc void @assert_impl(i1 test, %c_int __LINE__)
    #endif

; stdio

    ; libc
    declare ccc %c_int @fputs(%c_char*, %c_char*)
    declare ccc %c_int @putchar(%c_int)
    declare ccc %c_int @puts(%c_char *)

    declare ccc %c_int @getchar()
    declare ccc %c_int @ungetc(%c_int, %c_char*)

    declare ccc %c_int @feof(%c_char*)
    declare ccc %c_int @ferror(%c_char*)

    declare ccc %c_int @printf(%c_char*, ...)

    ; Additional I/O code in system_c.c
    declare ccc %c_char* @getstdfileptr(%c_int)

    ; Additional I/O code in system_ll.llm
    declare ccc %c_int @putstring(%c_char*) ; puts(), sans newline
    declare ccc void @puti(%c_int)

    ; We define our own codes, whether they match or not, to decouple our
    ; code from libc.
    #define IO_EOF      -1
    #define IO_ERROR    -10

    declare ccc void   @ungetchar_asserted(%c_int %char)
    declare ccc %c_int @getchar_checked()

; Malloc & friends

    declare ccc i8* @malloc(%c_size_t %size)

; Strings

    declare ccc %c_char* @strdup(%c_char*)
    declare ccc %c_char* @strndup(%c_char*, %c_size_t %len)
    declare ccc %c_int @strcmp(%c_char*, %c_char*)

    declare ccc %c_size_t @strlen(%c_char* %string)

; Useful Macros

    #define DECLARE_STRING(name, len)

#endif
