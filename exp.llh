#ifndef EXP_LLH
#define EXP_LLH

;**********************************************************************
; exp.llh
;
; Public declarations for the Expression module.
;
; Copyright 2009-2010 by Dustin Laurence.  Distributed under the terms of
; the LGPLv3.
;
;**********************************************************************

#include "nil.llh"

;FIXME: quite a bit of this header should be private

; Everything in Nil is an expression, implemented as a pointer to an
; object (of the low-level malloc() sort, not the Smalltalk or even
; C++ sort).  The pointer is represented as an integer because we will
; be storing type tags in the low-order bits, and need to know the type
; before we know how to manipulate the pointer.

; Naming convention note; this isn't nil_exp because I don't think
; lisp has or needs an explicit name for this type--*EVERYTHING* is this
; type, always.

    %Exp = type %Word
    %Tag = type i3
    %nil_cell = type {%Exp, %Exp}

; Tag field type values.
    #define SYMBOL_TAG  3
    ; Testing--should work with any value
    #define   CELL_TAG  7

    ; This is just a tagged null pointer
    #define   NIL CELL_TAG

; Low-level manipulation of the tags embedded in the low-order bits.
    ; FIXME: these trivial functions should *always* be inlined
    declare NILCC %Tag @GetTag(%Exp %exp)
    declare NILCC %Exp @ClearTag(%Exp %exp)
    declare NILCC %Exp @AddTag(%Exp %exp, %Tag %tag)
    declare NILCC %Exp @SetTag(%Exp %exp, %Tag %tag)

    declare NILCC i1 @Aligned(i8* %ptr)

; Conversions

    ; Symbol
    declare NILCC %Exp     @str2Exp(%c_char* %str)
    declare NILCC %c_char* @Exp2str(%Exp %exp)

    ; List
    declare NILCC %Exp       @nil_cell2Exp(%nil_cell* %cell)
    declare NILCC %nil_cell* @Exp2nil_cell(%Exp       %exp)

; The "seven primitive operators" of Paul Graham's paper, plus
; internal forms

    ; #2 -- atom
    declare NILCC i1 @Atom(%Exp %exp)

    ; #4 -- car
    declare NILCC %Exp @nil_car(%Exp %exp)

    ; #5 -- cdr
    declare NILCC %Exp @nil_cdr(%Exp %exp)

    ; #6 -- cons
    declare NILCC %Exp @nil_cons(%Exp %car, %Exp %cdr)

; Other symbol manipulations

    declare NILCC %Exp @NewSymbol(%c_char* %name)

; Other list manipulations

; Expression I/O
    declare NILCC void @PrintExp(%Exp %exp)

    ; String uniquifying

    declare NILCC void     @PrintAllStrings()
    declare NILCC %c_char* @UniqueString(%c_char* %string)
    declare NILCC void     @PushString(%c_char* %string)
    declare NILCC %c_char* @FindString(%c_char* %searchString)
    declare NILCC %c_char* @FindStringR(%Exp %list, 
                                        %c_char* %searchString)

#endif

