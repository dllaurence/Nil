#ifndef EXP_LLH
#define EXP_LLH

;**********************************************************************
; exp.llh
;
; Public declarations for the Expression module.
;
; Copyright 2009-2010 by Dustin Laurence.  Distributed under the terms of
; the LGPLv3.
;
;**********************************************************************

#include "nil.llh"

;FIXME: quite a bit of this header should be private

; Fundamental types

    ; N.B. The fundamental %Exp type is defined in nil.llh

    %nil_cell = type {%Exp, %Exp}

; Tag fields.

    %Tag = type i3
    #define MAX_TAG 7

    #define SYMBOL_TAG  3
    ; Testing--should work with any value
    #define   CELL_TAG  7

    ; We define Nil as the null symbol instead of the null cell because
    ; it makes testing for a non-null cell a single comparison.
    #define   NIL SYMBOL_TAG

; Low-level manipulation of the tags embedded in the low-order bits.
    ; FIXME: these trivial functions should *always* be inlined
    declare NILCC %Tag @GetTag(%Exp %exp)
    declare NILCC %Exp @ClearTag(%Exp %exp)
    declare NILCC %Exp @AddTag(%Exp %exp, %Tag %tag)
    declare NILCC %Exp @SetTag(%Exp %exp, %Tag %tag)

    declare NILCC i1 @Aligned(i8* %ptr)

; Conversions

    ; Symbol
    declare NILCC %Exp     @str2Exp(%c_char* %str)
    declare NILCC %c_char* @Exp2str(%Exp %exp)

    ; List
    declare NILCC %Exp       @nil_cell2Exp(%nil_cell* %cell)
    declare NILCC %nil_cell* @Exp2nil_cell(%Exp       %exp)

; The "seven primitive operators" of Paul Graham's paper, plus
; internal forms

    ; #2 -- atom
    declare NILCC i1 @Atom(%Exp %exp)

    ; #4 -- car
    declare NILCC %Exp @nil_car(%Exp %exp)

    ; #5 -- cdr
    declare NILCC %Exp @nil_cdr(%Exp %exp)

    ; #6 -- cons
    declare NILCC %Exp @nil_cons(%Exp %car, %Exp %cdr)

; Other tests

    declare NILCC i1 @Cell(%Exp %exp)

; Other symbol manipulations

    declare NILCC %Exp @NewSymbol(%c_char* %name)

; Expression I/O
    declare NILCC void @PrintExp(%Exp %exp)

#endif

