;**********************************************************************
; nil.llm
;
; Nil main program

; Coding conventions: all native quantities that have a direct correspondence
; with something in lisp are named "nil_<name>" where <name> is the name
; recognized by Nil.
;
; Similarly, all quantities imported from C source have a "c_" prefix
; (obviously quantites defined in libc, such as printf, have their standard
; name).
;
; The above rules apply to macros, but in all caps.
;
; Everything else is an implementation-defined quantity not visible to
; Nil.  They are in my C++ camel case convention (initial cap is a type
; or function, initial small is a variable) to further distinguish them
; from the above.  Also, I am using a 'p' prefix to denote pointers where
; it seems to clarify the code, but probably not consistently.
;
; Finally, to avoid horrible confusion, when it appear by itself or in English
; text the name of the language Nil is always capitalized and the name of the
; empty list nil is always in all lowercase.
;
; Organization: basically like C, with .llh #include files for public module
; declarations and .llm module implementation files.  Note that for ease of
; development I have not always divided the project into as many modules as
; it would have for a finished work, however the modules should be obvious and
; easily broken out as becomes convenient.  Also note that the c_defs and
; system modules have different rules.
;
; Cheats:
;
;   * Using malloc()
;   * Using getchar and other stdio functions instead of read() and write().
;   * Using the C string-handling functions.  Would prefer counted
;     strings anyway.
;
; Copyright 2009 by Dustin Laurence.  Distributed under the terms of
; the LGPLv3.
;
;**********************************************************************

#include "nil.llh"
#include "system.llh"
#include "lex.llh"

;**********************************************************************
; main
;
;**********************************************************************

#define PROMPTARRAY_LEN 6
@promptArray = internal constant [PROMPTARRAY_LEN x %c_char] c"nil> \00"

define %c_int
@main(%c_int %argc, %c_char **%argv)
{
    br label %PrintPrompt

PrintPrompt:
    %promptString = getelementptr [PROMPTARRAY_LEN x %c_char]* @promptArray, i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %promptString)
    br label %ReadChar

ReadChar:
    %char = call NILCC %c_int @GetValidChar()

    switch %c_int %char, label %PrintChar [

        %c_int LEX_EOF,      label %Exit
        %c_int LEX_IOERROR,  label %Exit
        %c_int LEX_BADCHAR,  label %ReadChar

        %c_int ASCII_NEWLINE,  label %NewLine
    ]

PrintChar:
    call ccc %c_int @putchar(%c_int %char)
    br label %ReadChar

NewLine:
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    br label %PrintPrompt

Exit:
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    ret %c_int 0
}

