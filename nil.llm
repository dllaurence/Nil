;**********************************************************************
; nil.llm
;
; Nil main program

; Coding conventions: all native quantities that have a direct correspondence
; with something in lisp are named "nil_<name>" where <name> is the name
; recognized by Nil.
;
; Similarly, all quantities imported from C source have a "c_" prefix
; (obviously quantites defined in libc, such as printf, have their standard
; name).
;
; The above rules apply to macros, but in all caps.
;
; Everything else is an implementation-defined quantity not visible to
; Nil.  They are in my C++ camel case convention (initial cap is a type
; or function, initial small is a variable) to further distinguish them
; from the above.  Also, I am using a 'p' prefix to denote pointers where
; it seems to clarify the code, but probably not consistently.
;
; Finally, to avoid horrible confusion, when it appear by itself or in English
; text the name of the language Nil is always capitalized and the name of the
; empty list nil is always in all lowercase.
;
; Organization: basically like C, with .llh #include files for public module
; declarations and .llm module implementation files.  Note that for ease of
; development I have not always divided the project into as many modules as
; it would have for a finished work, however the modules should be obvious and
; easily broken out as becomes convenient.  Also note that the c_defs and
; system modules have different rules.
;
; Cheats:
;
;   * Using malloc()
;   * Using getchar and other stdio functions instead of read() and write().
;   * Using the C string-handling functions.  Would prefer counted
;     strings anyway.
;
; Copyright 2009-2010 by Dustin Laurence.  Distributed under the terms of
; the LGPLv3.
;
;**********************************************************************

#include "nil.llh"
#include "system.llh"
#include "lex.llh"
#include "exp.llh"
#include "memory.llh"

;**********************************************************************
; ReadToken (public)
;
; The front end of the nil tokenizer.  Constructs the tokens required
; by the parser from the lexemes identified by ReadLexeme().
;
;**********************************************************************

define NILCC %Token
@ReadToken()
{
    %token = call NILCC %Token @ReadLexeme()
    %tokenType = extractvalue %Token %token, 0

    switch %c_int %tokenType, label %CantHappen [

        %c_int NIL_EXCEPTION,  label %PassThrough

        %c_int ASCII_NEWLINE,  label %PassThrough

        %c_int ASCII_LPAREN,   label %PassThrough
        %c_int ASCII_RPAREN,   label %PassThrough
        %c_int NIL_SYMBOL,     label %ReturnSymbol
    ]

CantHappen:
    cant_happen()
    br label %CantHappen

PassThrough:
    ret %Token %token

ReturnSymbol:
    %lexemeWord = extractvalue %Token %token, 1
    %lexeme = inttoptr %Word %lexemeWord to %c_char*
    #ifndef NDEBUG
    ; Check to see that the string is at least one character long
    ; (since the lexer shouldn't ever produce an empty string)
    %len = call ccc %c_size_t @strlen(%c_char* %lexeme)
    %positive = icmp ugt %c_size_t %len, 0
    assert(%positive)
    ; Could assert that it's aligned as well.
    #endif

    ; Get the corresponding nil_symbol
    %symbol = call NILCC %Exp @NewSymbol(%c_char* %lexeme)
    %symbolWord = bitcast %Exp %symbol to %Word ; currently pointless
    %newToken = insertvalue %Token %token, %Word %symbolWord, 1

    ret %Token %newToken
}

;**********************************************************************
; Some interpreter messages
;
;**********************************************************************

#define WELCOMEARRAY_LEN 62
@welcomeArray = internal constant [WELCOMEARRAY_LEN x %c_char]
    c"Welcome to nil v0.0.4.  Press <ctrl>-D at the prompt to exit.\00"

#define PROMPTARRAY_LEN 6
@promptArray = internal constant [PROMPTARRAY_LEN x %c_char] c"nil> \00"

#define KNOWNARRAY_LEN 16
@knownArray = internal constant [KNOWNARRAY_LEN x %c_char] c"Known strings: \00"

#define BADCHARARRAY_LEN 16
@badCharArray = internal constant [BADCHARARRAY_LEN x %c_char]
    c"#bad character#\00"

#define IOERRORARRAY_LEN 20
@ioErrorArray = internal constant [IOERRORARRAY_LEN x %c_char]
    c"I/O error on input.\00"

;**********************************************************************
; main
;
;**********************************************************************

define %c_int
@main(%c_int %argc, %c_char **%argv)
{
    ; This flag is necessary to avoid double-spacing the prompt when
    ; nothing was entered.
    %hadInputPtr = alloca i1
    store i1 0, i1* %hadInputPtr

    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    %welcomeString = getelementptr [WELCOMEARRAY_LEN x %c_char]*
                                           @welcomeArray, i64 0, i64 0
    call ccc %c_int @puts(%c_char* %welcomeString)
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    br label %PrintPrompt

PrintPrompt:
    ; Show the current list of strings before each new prompt
    %knownStr = getelementptr [KNOWNARRAY_LEN x %c_char]* @knownArray,
                                                          i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %knownStr)
    call NILCC void @PrintAllStrings()
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)

    ; Print the prompt
    %promptString = getelementptr [PROMPTARRAY_LEN x %c_char]*
                                           @promptArray, i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %promptString)
    br label %ReadChar

ReadChar:
    %token = call NILCC %Token @ReadToken()
    %code = extractvalue %Token %token, 0

    switch %c_int %code, label %PrintChar [

        %c_int NIL_SYMBOL,   label   %PrintExp
        %c_int NIL_CELL,     label   %PrintExp

        %c_int ASCII_NEWLINE,  label %NewLine

        %c_int NIL_EXCEPTION, label  %Exception
    ]

PrintChar:
    call ccc %c_int @putchar(%c_int %code)
    call ccc %c_int @putchar(%c_int ASCII_SPACE)
    store i1 1, i1* %hadInputPtr
    br label %ReadChar

PrintExp:
    %expWord = extractvalue %Token %token, 1
    %exp = bitcast %Word %expWord to %Exp
    call NILCC void @PrintExp(%Exp %exp)
    call ccc %c_int @putchar(%c_int ASCII_SPACE)
    store i1 1, i1* %hadInputPtr
    br label %ReadChar

NewLine:
    %hadInput = load i1* %hadInputPtr
    br i1 %hadInput, label %IfHadInput, label %EndIfHadInput
    IfHadInput:
        call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
        br label %EndIfHadInput
    EndIfHadInput:

    store i1 0, i1* %hadInputPtr
    br label %PrintPrompt

Exception:

    %exception = extractvalue %Token %token, 1

    switch %Word %exception, label %CantHappen [

        %Word NIL_EOF,          label %Exit
        %Word NIL_IOERROR,      label %ExitIOError
        %Word NIL_BADCHAR,      label %WarnBadChar
        ;%Word NIL_EXTRA_RPAREN,
    ]

CantHappen:
%exceptInt = trunc %Word %exception to %c_int
call ccc void @puti(%c_int %exceptInt)
    cant_happen()
    br label %CantHappen

ExitIOError:
    %ioErrorMsg = getelementptr [IOERRORARRAY_LEN x %c_char]*
                        @ioErrorArray, i64 0, i64 0
    call ccc %c_int @puts(%c_char* %ioErrorMsg)
    store i1 1, i1* %hadInputPtr
    br label %Exit

WarnBadChar:
    %badCharMsg = getelementptr [BADCHARARRAY_LEN x %c_char]*
                        @badCharArray, i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %badCharMsg)
    call ccc %c_int @putchar(%c_int ASCII_SPACE)
    store i1 1, i1* %hadInputPtr
    br label %ReadChar

Exit:
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    ret %c_int 0
}

