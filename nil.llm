;**********************************************************************
; nil.llm
;
; Nil main program

; Coding conventions: all native quantities that have a direct correspondence
; with something in lisp are named "nil_<name>" where <name> is the name
; recognized by Nil.
;
; Similarly, all quantities imported from C source have a "c_" prefix
; (obviously quantites defined in libc, such as printf, have their standard
; name).
;
; The above rules apply to macros, but in all caps.
;
; Everything else is an implementation-defined quantity not visible to
; Nil.  They are in my C++ camel case convention (initial cap is a type
; or function, initial small is a variable) to further distinguish them
; from the above.  Also, I am using a 'p' prefix to denote pointers where
; it seems to clarify the code, but probably not consistently.
;
; Finally, to avoid horrible confusion, when it appear by itself or in English
; text the name of the language Nil is always capitalized and the name of the
; empty list nil is always in all lowercase.
;
; Organization: basically like C, with .llh #include files for public module
; declarations and .llm module implementation files.  Note that for ease of
; development I have not always divided the project into as many modules as
; it would have for a finished work, however the modules should be obvious and
; easily broken out as becomes convenient.  Also note that the c_defs and
; system modules have different rules.
;
; Cheats:
;
;   * Using malloc()
;   * Using getchar and other stdio functions instead of read() and write().
;   * Using the C string-handling functions.  Would prefer counted
;     strings anyway.
;
; Copyright 2009-2010 by Dustin Laurence.  Distributed under the terms of
; the LGPLv3.
;
;**********************************************************************

#include "nil.llh"
#include "system.llh"
#include "lex.llh"
#include "exp.llh"

;**********************************************************************
; NextToken (public)
;
; The front end of the nil tokenizer.  Constructs the tokens required
; by the parser from the lexemes identified by NextLexeme().  Part of
; the expression module because when complete it will know about
; expression types.
;
;**********************************************************************

%Token = type {%c_int, %Exp}
 
define NILCC void
@NextToken(%Token* %token)
{
    %tokenType = call NILCC %c_int @NextLexeme()

    ; Set up both pointers here for convenience
    %typeFieldPtr = getelementptr %Token* %token, i32 0, i32 0
    %expFieldPtr = getelementptr %Token* %token, i32 0, i32 1

    store %c_int %tokenType, %c_int* %typeFieldPtr

    switch %c_int %tokenType, label %CantHappen [

        %c_int LEX_EOF,        label %ReturnCode
        %c_int LEX_IOERROR,    label %ReturnCode
        %c_int LEX_BADCHAR,    label %ReturnCode

        %c_int ASCII_NEWLINE,  label %ReturnCode

        %c_int ASCII_LPAREN,   label %ReturnCode
        %c_int ASCII_RPAREN,   label %ReturnCode
        %c_int LEX_SYMBOL,     label %ReturnSymbol
    ]

CantHappen:
    cant_happen()
    br label %CantHappen

ReturnCode:
    store %Exp 0, %Exp* %expFieldPtr
    ret void

ReturnSymbol:
    %lexeme = call NILCC %c_char* @GetLexemePtr()
    #ifndef NDEBUG
    ; Check to see that the string is at least one character long
    ; (since the lexer shouldn't ever produce an empty string)
    %len = call ccc %c_size_t @strlen(%c_char* %lexeme)
    %positive = icmp ugt %c_size_t %len, 0
    assert(%positive)
    #endif

    ; Get the corresponding nil_symbol
    %symbol = call NILCC %Exp @NewSymbol(%c_char* %lexeme)

    store %Exp %symbol, %Exp* %expFieldPtr
    ret void
}

;**********************************************************************
; Some interpreter messages
;
;**********************************************************************

#define WELCOMEARRAY_LEN 62
@welcomeArray = internal constant [WELCOMEARRAY_LEN x %c_char]
    c"Welcome to nil v0.0.3.  Press <ctrl>-D at the prompt to exit.\00"

#define PROMPTARRAY_LEN 6
@promptArray = internal constant [PROMPTARRAY_LEN x %c_char] c"nil> \00"

#define BADCHARARRAY_LEN 16
@badCharArray = internal constant [BADCHARARRAY_LEN x %c_char]
    c"#bad character#\00"

#define IOERRORARRAY_LEN 20
@ioErrorArray = internal constant [IOERRORARRAY_LEN x %c_char]
    c"I/O error on input.\00"

;**********************************************************************
; main
;
;**********************************************************************

define %c_int
@main(%c_int %argc, %c_char **%argv)
{
    %tokenPtr = alloca %Token

    ; This flag is necessary to avoid double-spacing the prompt when
    ; nothing was entered.
    %hadInputPtr = alloca i1
    store i1 0, i1* %hadInputPtr

    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    %welcomeString = getelementptr [WELCOMEARRAY_LEN x %c_char]*
                                           @welcomeArray, i64 0, i64 0
    call ccc %c_int @puts(%c_char* %welcomeString)
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    br label %PrintPrompt

PrintPrompt:
    %promptString = getelementptr [PROMPTARRAY_LEN x %c_char]*
                                           @promptArray, i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %promptString)
    br label %ReadChar

ReadChar:
    call NILCC void @NextToken(%Token* %tokenPtr)
    %codePtr = getelementptr %Token* %tokenPtr, i32 0, i32 0
    %code = load %c_int* %codePtr

    switch %c_int %code, label %PrintChar [

        %c_int LEX_EOF,      label %Exit
        %c_int LEX_IOERROR,  label %ExitIOError
        %c_int LEX_BADCHAR,  label %WarnBadChar
        %c_int LEX_SYMBOL,   label %PrintSymbol

        %c_int ASCII_NEWLINE,  label %NewLine
    ]

PrintChar:
    call ccc %c_int @putchar(%c_int %code)
    call ccc %c_int @putchar(%c_int ASCII_SPACE)
    store i1 1, i1* %hadInputPtr
    br label %ReadChar

ExitIOError:
    %ioErrorMsg = getelementptr [IOERRORARRAY_LEN x %c_char]*
                        @ioErrorArray, i64 0, i64 0
    call ccc %c_int @puts(%c_char* %ioErrorMsg)
    store i1 1, i1* %hadInputPtr
    br label %Exit

WarnBadChar:
    %badCharMsg = getelementptr [BADCHARARRAY_LEN x %c_char]*
                        @badCharArray, i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %badCharMsg)
    call ccc %c_int @putchar(%c_int ASCII_SPACE)
    store i1 1, i1* %hadInputPtr
    br label %ReadChar

PrintSymbol:
    %expPtr = getelementptr %Token* %tokenPtr, i32 0, i32 1
    %symbolExp = load %Exp* %expPtr
    ;call ccc %c_int @putstring(%c_char* %lexeme)
    call NILCC void @PrintExp(%Exp %symbolExp)
    call ccc %c_int @putchar(%c_int ASCII_SPACE)
    store i1 1, i1* %hadInputPtr
    br label %ReadChar

NewLine:
    %hadInput = load i1* %hadInputPtr
    br i1 %hadInput, label %IfHadInput, label %EndIfHadInput
    IfHadInput:
        call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
        br label %EndIfHadInput
    EndIfHadInput:

    store i1 0, i1* %hadInputPtr
    br label %PrintPrompt

Exit:
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    ret %c_int 0
}

