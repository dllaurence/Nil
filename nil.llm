;**********************************************************************
; nil.llm
;
; Nil main program

; Coding conventions: all native quantities that have a direct correspondence
; with something in lisp are named "nil_<name>" where <name> is the name
; recognized by Nil.
;
; Similarly, all quantities imported from C source have a "c_" prefix
; (obviously quantites defined in libc, such as printf, have their standard
; name).
;
; The above rules apply to macros, but in all caps.
;
; Everything else is an implementation-defined quantity not visible to
; Nil.  They are in my C++ camel case convention (initial cap is a type
; or function, initial small is a variable) to further distinguish them
; from the above.  Also, I am using a 'p' prefix to denote pointers where
; it seems to clarify the code, but probably not consistently.
;
; Finally, to avoid horrible confusion, when it appear by itself or in English
; text the name of the language Nil is always capitalized and the name of the
; empty list nil is always in all lowercase.
;
; Organization: basically like C, with .llh #include files for public module
; declarations and .llm module implementation files.  Note that for ease of
; development I have not always divided the project into as many modules as
; it would have for a finished work, however the modules should be obvious and
; easily broken out as becomes convenient.  Also note that the c_defs and
; system modules have different rules.
;
; Cheats:
;
;   * Using malloc()
;   * Using getchar and other stdio functions instead of read() and write().
;   * Using the C string-handling functions.  Would prefer counted
;     strings anyway.
;
; Copyright 2009-2010 by Dustin Laurence.  Distributed under the terms of
; the LGPLv3.
;
;**********************************************************************

#include "nil.llh"
#include "system.llh"
#include "lex.llh"
#include "exp.llh"
#include "memory.llh"

; For now, we'll leave the definition here in the main module.
; For now, we are maintaining the definition here and the declarations
; in other files by hand because LLVM would call this a redefinition of
; an external declaration. :-(
    @exceptionCode = global %Word 0

;**********************************************************************
; ReadToken (public)
;
; The front end of the nil tokenizer.  Constructs the tokens required
; by the parser from the lexemes identified by ReadLexeme().
;
;**********************************************************************

; Right now, I can't make this work across translation units, so we
; aren't using it.
#undef INVOKE_READLEXEME

define NILCC %Token
@ReadToken()
{
#ifdef INVOKE_READLEXEME
    %token = invoke NILCC %Token @ReadLexeme()
        to     label %DoType
        unwind label %Catch

    Catch:
            call ccc %c_int @putchar(%c_int ASCII_BANG)
            %exceptionType = load %Word* @exceptionCode
            %exception = insertvalue %Token {%c_int NIL_EXCEPTION, %Word 0},
                                                       %Word %exceptionType, 1
            ret %Token %exception
DoType:
#else
    %token = call NILCC %Token @ReadLexeme()
#endif

    %tokenType = extractvalue %Token %token, 0

    switch %c_int %tokenType, label %CantHappen [

#ifdef INVOKE_READLEXEME
        %c_int NIL_EXCEPTION,  label %BadException
#else
        %c_int NIL_EXCEPTION,  label %Exception
#endif

        %c_int ASCII_NEWLINE,  label %PassThrough

        %c_int ASCII_LPAREN,   label %PassThrough
        %c_int ASCII_RPAREN,   label %PassThrough
        %c_int NIL_SYMBOL,     label %ReturnSymbol
    ]

; Different than CantHappen for testing purposes--will eventually go away
; when I'm confident in invoke/unwind
BadException:
    cant_happen()
    br label %BadException

CantHappen:
    cant_happen()
    br label %CantHappen

Exception:
    ret %Token %token

PassThrough:
    ret %Token %token

ReturnSymbol:
    %lexemeWord = extractvalue %Token %token, 1
    %lexeme = inttoptr %Word %lexemeWord to %c_char*
    #ifndef NDEBUG
    ; Check to see that the string is at least one character long
    ; (since the lexer shouldn't ever produce an empty string)
    %len = call ccc %c_size_t @strlen(%c_char* %lexeme)
    %positive = icmp ugt %c_size_t %len, 0
    assert(%positive)
    ; Could assert that it's aligned as well.
    #endif

    ; Get the corresponding nil_symbol
    %symbol = call NILCC %Exp @NewSymbol(%c_char* %lexeme)
    %symbolWord = bitcast %Exp %symbol to %Word ; currently pointless
    %newToken = insertvalue %Token %token, %Word %symbolWord, 1

    ret %Token %newToken
}

#if 0
;**********************************************************************
; Parser
;
; The beginnings of a parser module.
;
;**********************************************************************

#define CONTPROMPTARRAY_LEN 5
@contPromptArray = internal constant [CONTPROMPTARRAY_LEN x %c_char] c"--> \00"

;**********************************************************************
; ReadExp (public)
;
; The Nil parser, implemented as a mutually recursive pair of functions.
;
;**********************************************************************

define NILCC %Token
@ReadExp()
{
    br label ReadToken

ReadToken:
    %token = call NILCC %Token @ReadToken()

    %tokenType = extractvalue %Token %token, 0

    switch %c_int %tokenType, label %CantHappen [

        %c_int NIL_CELL,       label %CantHappen  ; Noted explicitly
        %c_int NIL_SYMBOL,     label %ReturnToken

        %c_int ASCII_LPAREN,   label %BeginList
        %c_int ASCII_RPAREN,   label %EndList

        %c_int ASCII_NEWLINE,  label %Newline

        %c_int NIL_EXCEPTION,  label %ReturnToken
    ]

CantHappen:
    cant_happen()
    br label %CantHappen

ReturnToken:
    ret %Token %token

BeginList:
    %listToken = call NILCC %Token @ReadList()
    ret %Token %listToken

EndList:
    %lParenToken = insertvalue %Token {%c_int NIL_EXCEPTION, %Word undef},
                                                   %Word NIL_EXTRA_LPAREN, 1
     ret %Token %lParenToken

Newline:
    %promptStr = getelementptr [CONTPROMPTARRAY_LEN x %c_char]* @contPromptArray,
                                                                i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %promptStr)
    br label %ReadToken
}

;**********************************************************************
; ReadList (private)
;
; Warning: here there be tygers.  Recursive tygers.
;
; Also, some incidental complification comes from the absence of a
; nested block structure.
;
; That said, nothing will make the recursion entirely simple.
;
;**********************************************************************

define NILCC %Token
@ReadList()
{
    br label %ReadToken

ReadToken:
    %token = call NILCC %Token @ReadExp()
}

#if 0
define NILCC %Token
@ReadList()
{
    br label %ReadToken

ReadToken:
    %token = call NILCC %Token @ReadToken()

    %tokenType = extractvalue %Token %token, 0

    switch %c_int %tokenType, label %CantHappen [

        %c_int NIL_CELL,       label %CantHappen  ; Noted explicitly
      X %c_int NIL_SYMBOL,     label %Symbol

      X %c_int ASCII_LPAREN,   label %BeginList
        %c_int ASCII_RPAREN,   label %EndList

        %c_int ASCII_NEWLINE,  label %Newline

        %c_int NIL_EXCEPTION,  label %Exception
    ]

CantHappen:
    cant_happen()
    br label %CantHappen

EndList:
    ; We're calling 'NIL' a symbol here, because it is the non-cons
    ; cell nature of nil that matters for parsing
    %nilToken = insertvalue %Token {%c_int NIL_SYMBOL, %Word undef},
                                                      %Word NIL_VALUE, 1
    ret %Token %nilToken

Newline:
    %promptStr = getelementptr [CONTPROMPTARRAY_LEN x %c_char]* @contPromptArray,
                                                                i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %promptStr)
    br label %ReadToken

Exception:
    ; FIXME: we're throwing these away, so optimize this into a simple
    ; loop (jumping right back to the Exception label?)
    call NILCC %Token @ReadList() ; We only keep the first exception
    ret %Token %token

Symbol:
    %car = extractvalue %Token %token, 1

    %retToken = call NILCC %Token @ReadCDR(%Exp %car)
    ret %Token %retToken

BeginList:
    %carToken = call NILCC %Token @ReadList()
    %carType = extractvalue %Token %carToken, 0
    %car = extractvalue %Token %carToken, 1

    ; Likewise, ReadList can only return one of these three types
    switch %c_int %carType, label %CantHappen [

        %c_int NIL_EXCEPTION, label %DropCDR
        %c_int NIL_SYMBOL,    label %CARNil ; only if nil
        %c_int NIL_CELL,      label %CAR_OK
    ]

DropCDR:
    ; FIXME: we're throwing these away, so optimize this into a simple
    ; loop (jumping right back to the Exception label?)
    call NILCC %Token @ReadList() ; drop it on the floor
    ret %Token %carToken

CARNil:
    #ifndef NDEBUG
    ; We received a symbol--car had better be nil
    %nilCar = extractvalue %Token %carToken, 1
    %carIsNil = icmp eq %Exp %nilCar, NIL_VALUE
    assert(%carIsNil)
    #endif
    br CAR_OK

CAR_OK:
    %retToken = call NILCC %Token @ReadCDR(%Exp %car)
    ret %Token %retToken
}
#endif

;**********************************************************************
; ReadCDR (private)
;
; Warning: here there be tygers.  Recursive tygers.
;
; Helper routine factored out of ReadList.  We have a non-exceptional
; car expression, so read the cdr and cons.
;
;**********************************************************************

define NILCC %Token
@ReadCDR(%Exp %car)
{
    %cdrToken = call NILCC %Token @ReadList()

    %cdrType = extractvalue %Token %cdrToken, 0

    ; ReadExp can only return one of these three types
    switch %c_int %cdrType, label %CantHappen [

        %c_int NIL_EXCEPTION, label %DropCAR
        %c_int NIL_SYMBOL,    label %CDRNil     ; only possible if nil
        %c_int NIL_CELL,      label %ReturnCons
    ]

CantHappen:
    cant_happen()
    br label %CantHappen

DropCAR:
    ret %Token %cdrToken
}

CDRNil:
    #ifndef NDEBUG
    ; We received a symbol--cdr had better be nil
    %nilCdr = extractvalue %Token %cdrToken, 1
    %cdrIsNil = icmp eq %Exp %nilCdr, NIL_VALUE
    assert(%cdrIsNil)
    #endif
    br label %ReturnCons

ReturnCons:
    ; We have a non-exceptional cdr expression, so just cons
    ; and return.
    %cdr = extractvalue %Token %cdrToken, 1
    %cell = call NILCC %Exp @nil_cons(%Exp %car, %Exp %cdr)
    %cellToken = insertvalue %Token {%c_int NIL_CELL, %Word undef},
                                                      %Word %cell, 1
    ret %Token %cell
}

#endif

;**********************************************************************
; Some interpreter messages
;
;**********************************************************************

#define WELCOMEARRAY_LEN 65
@welcomeArray = internal constant [WELCOMEARRAY_LEN x %c_char]
    c"Welcome to nil v0.0.4.p1.  Press <ctrl>-D at the prompt to exit.\00"

#define PROMPTARRAY_LEN 6
@promptArray = internal constant [PROMPTARRAY_LEN x %c_char] c"nil> \00"

#define KNOWNARRAY_LEN 16
@knownArray = internal constant [KNOWNARRAY_LEN x %c_char] c"Known strings: \00"

#define BADCHARARRAY_LEN 16
@badCharArray = internal constant [BADCHARARRAY_LEN x %c_char]
    c"#bad character#\00"

#define IOERRORARRAY_LEN 20
@ioErrorArray = internal constant [IOERRORARRAY_LEN x %c_char]
    c"I/O error on input.\00"

;**********************************************************************
; main
;
;**********************************************************************

define %c_int
@main(%c_int %argc, %c_char **%argv)
{
    ; This flag is necessary to avoid double-spacing the prompt when
    ; nothing was entered.
    %hadInputPtr = alloca i1
    store i1 0, i1* %hadInputPtr

    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    %welcomeString = getelementptr [WELCOMEARRAY_LEN x %c_char]*
                                           @welcomeArray, i64 0, i64 0
    call ccc %c_int @puts(%c_char* %welcomeString)
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    br label %PrintPrompt

PrintPrompt:
    ; Show the current list of strings before each new prompt
    %knownStr = getelementptr [KNOWNARRAY_LEN x %c_char]* @knownArray,
                                                          i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %knownStr)
    call NILCC void @PrintAllStrings()
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)

    ; Print the prompt
    %promptString = getelementptr [PROMPTARRAY_LEN x %c_char]*
                                           @promptArray, i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %promptString)
    br label %ReadChar

ReadChar:
    %token = call NILCC %Token @ReadToken()
    %code = extractvalue %Token %token, 0

    switch %c_int %code, label %PrintChar [

        %c_int NIL_SYMBOL,   label   %PrintExp
        %c_int NIL_CELL,     label   %PrintExp

        %c_int ASCII_NEWLINE,  label %NewLine

        %c_int NIL_EXCEPTION, label  %Exception
    ]

PrintChar:
    call ccc %c_int @putchar(%c_int %code)
    call ccc %c_int @putchar(%c_int ASCII_SPACE)
    store i1 1, i1* %hadInputPtr
    br label %ReadChar

PrintExp:
    %expWord = extractvalue %Token %token, 1
    %exp = bitcast %Word %expWord to %Exp
    call NILCC void @PrintExp(%Exp %exp)
    call ccc %c_int @putchar(%c_int ASCII_SPACE)
    store i1 1, i1* %hadInputPtr
    br label %ReadChar

NewLine:
    %hadInput = load i1* %hadInputPtr
    br i1 %hadInput, label %IfHadInput, label %EndIfHadInput
    IfHadInput:
        call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
        br label %EndIfHadInput
    EndIfHadInput:

    store i1 0, i1* %hadInputPtr
    br label %PrintPrompt

Exception:

    %exception = extractvalue %Token %token, 1

    switch %Word %exception, label %CantHappen [

        %Word NIL_EOF,          label %Exit
        %Word NIL_IOERROR,      label %ExitIOError
        %Word NIL_BADCHAR,      label %WarnBadChar
        ;%Word NIL_EXTRA_RPAREN,
    ]

CantHappen:
%exceptInt = trunc %Word %exception to %c_int
call ccc void @puti(%c_int %exceptInt)
    cant_happen()
    br label %CantHappen

ExitIOError:
    %ioErrorMsg = getelementptr [IOERRORARRAY_LEN x %c_char]*
                        @ioErrorArray, i64 0, i64 0
    call ccc %c_int @puts(%c_char* %ioErrorMsg)
    store i1 1, i1* %hadInputPtr
    br label %Exit

WarnBadChar:
    %badCharMsg = getelementptr [BADCHARARRAY_LEN x %c_char]*
                        @badCharArray, i64 0, i64 0
    call ccc %c_int @putstring(%c_char* %badCharMsg)
    call ccc %c_int @putchar(%c_int ASCII_SPACE)
    store i1 1, i1* %hadInputPtr
    br label %ReadChar

Exit:
    call ccc %c_int @putchar(%c_int ASCII_NEWLINE)
    ret %c_int 0
}

