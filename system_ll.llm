;**********************************************************************
; system_ll.llm
;
; LLVM helper code.
;
; Copyright 2009 by Dustin Laurence.  Distributed under the terms of
; the LGPLv3.
;
;**********************************************************************

#include "system.llh"

;**********************************************************************
; assertions
;
;**********************************************************************

; One flaw in this system is that we can't use __FILE__; LLVM won't construct
; strings as cc will.
@cant_happen_array = internal constant [34 x %c_char]
    c"Line %d: The impossible happened!\00"

define ccc void @cant_happen_impl(%c_int %line)
{
    %pMsg = getelementptr [34 x %c_char]* @cant_happen_array, i64 0, i64 0

    ;%printf_cast = bitcast i32 (c_char*, ...)* @printf to i32 (c_char*, %c_int)*
    call ccc %c_int (%c_char*, ...)* @printf(%c_char* %pMsg, %c_int %line)
    call ccc %c_int @putchar(%c_int 10) ; why didn't \10 work in printf?
    ret void
}

@assert_array = internal constant [29 x %c_char] c"Line %d: Assertion failed, \10\00"

; never returns
define ccc void @assert_impl(i1 %test, %c_int %line)
{
    br i1 %test, label %Success, label %Failure

Success:
    ret void

Failure:
    %pMsg = getelementptr [29 x %c_char]* @assert_array, i64 0, i64 0
    call ccc %c_int (%c_char*, ...)* @printf(%c_char* %pMsg, %c_int %line)
    call ccc void @abort()
    cant_happen() ; Guard; @abort had better never return
    ret void
}

